#!/usr/bin/python -B
# ------------------------------------------------------------------------------
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#
#  See the License for the specific language governing permissions and
#  limitations under the License.
# ------------------------------------------------------------------------------
"""
NAME

   %(scriptName)s - TODO

SYNOPSIS

   %(scriptName)s

DESCRIPTION

   TODO

"""

import logging
import logging.handlers
import os
import signal
import sys
import traceback

sys.path.append(os.path.join(os.path.dirname(sys.argv[0]), os.pardir))
from station.main import StationLoader


app = None


# ------------------------------------------------------------------------------
def main(argv):
    """TODO strictly one-line summary

    TODO Detailed multi-line description if
    necessary.

    Args:
        arg1 (type1): TODO describe arg, valid values, etc.
        arg2 (type2): TODO describe arg, valid values, etc.
        arg3 (type3): TODO describe arg, valid values, etc.
    Returns:
        TODO describe the return type and details
    Raises:
        TodoError1: if TODO.
        TodoError2: if TODO.

    """
    global app

    scriptName = sys.argv[0].split("/")[-1]
    configFile = os.path.join(os.path.dirname(sys.argv[0]),
                              scriptName + ".conf")

    if len(argv) == 1:
        # TODO - log debug parsing successfully

        config = {}
        discard = {}
        execfile(configFile, discard, config) 
        # TODO - log info config file parsed successfully

        app = StationLoader(config['s'])
        app.start()
    else:
        print __doc__ % {'scriptName' : scriptName}

    return


# ------------------------------------------------------------------------------
def clean_termination(signal, frame):
    """TODO strictly one-line summary

    TODO Detailed multi-line description if
    necessary.

    Args:
        arg1 (type1): TODO describe arg, valid values, etc.
        arg2 (type2): TODO describe arg, valid values, etc.
        arg3 (type3): TODO describe arg, valid values, etc.
    Returns:
        TODO describe the return type and details
    Raises:
        TodoError1: if TODO.
        TodoError2: if TODO.

    """
    global app

    try:
        app.stop(signal)
    except Exception, e:
        logger.critical("Exception occurred while stopping: " + e.args[0])
        sys.exit(1)

    sys.exit(0)


# ------------------------------------------------------------------------------
if __name__ == "__main__":

    logger = logging.getLogger(__name__)
    logger.setLevel(logging.DEBUG) # TODO - delete
    handler = logging.handlers.SysLogHandler(address = '/dev/log')
    logger.addHandler(handler)

    try:
        # register the signal handler for the signals specified in the question
        signal.signal(signal.SIGINT,  clean_termination)
        signal.signal(signal.SIGTERM, clean_termination)
        signal.signal(signal.SIGABRT, clean_termination)

        #TODO Delete Disabled due to seg fault on Raspbian
        #TODO Delete monkey.patch_all()
        main(sys.argv)
    except Exception, e:
        exType, ex, tb = sys.exc_info()
        logger.critical("Exception occurred of type " + exType.__name__)
        logger.critical(str(e))
        traceback.print_tb(tb)
        sys.exit(1)

sys.exit(0)
