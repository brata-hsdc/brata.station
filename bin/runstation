#!/usr/bin/python -B
# ------------------------------------------------------------------------------
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#
#  See the License for the specific language governing permissions and
#  limitations under the License.
# ------------------------------------------------------------------------------
"""
usage: runstation [-h] [-c CONFIGFILE] [-m MASTERSERVER] [-t {hmb,cpa,cts}]
                  [-n STATIONNAME] [--console]

Run the Brata Station application. The app behavior is configured by a
configuration parameter file and command line arguments. The default config
file path is: <path-to-brata.station>/runstation.conf

optional arguments:
  -h, --help            show this help message and exit
  -m MASTERSERVER, --masterServer MASTERSERVER
                        Master Server address (hostname or IP address)
                        optionally followed by ":" and port number (default:
                        localhost:8080)
  -t {hmb,cpa,cts}, --stationType {hmb,cpa,cts}
                        one of "cts", "cpa", "hmb". If not specified, the
                        stationName will be used to determine stationType.
  -n STATIONNAME, --stationName STATIONNAME
                        usually a stationType followed by 2 digits.
  -c CONFIGFILE, --configFile CONFIGFILE
                        specify an alternate config file (default: /opt/design
                        challenge2015/brata.station/bin/runstation.conf)
  --console             emulate the station hardware interface using terminal
                        I/O

Examples:
    python runstation -t cts
    python runstation --masterServer localhost:80 -stationName hmb03
"""

import logging
import logging.handlers
import os
import signal
import sys
import traceback
import argparse

sys.path.append(os.path.join(os.path.dirname(sys.argv[0]), os.pardir))
from station.main import StationLoader


app = None
STATION_TYPES = ('dock', 'secure', 'rte', 'hmb', 'cpa', 'cts')
MS_DEFAULT_ADDR = "localhost:8080"
NET_INTERFACE_DEFAULT = "eth0"

# ------------------------------------------------------------------------------
def main():
    """TODO strictly one-line summary

    TODO Detailed multi-line description if
    necessary.

    Args:
        arg1 (type1): TODO describe arg, valid values, etc.
        arg2 (type2): TODO describe arg, valid values, etc.
        arg3 (type3): TODO describe arg, valid values, etc.
    Returns:
        TODO describe the return type and details
    Raises:
        TodoError1: if TODO.
        TodoError2: if TODO.

    """
    global app

    args = parseCmdLine()
    logger.info("runstation command line args: {}".format(repr(args)))

    # Evaluate the runstation.conf file, or another config file if a
    # name was specified on the command line
    config = {}
    execfile(args.configFile, locals(), config)

    app = StationLoader(config['s'])
    app.start()

    return

def parseCmdLine():
    """ Parse the command line arguments and query some env variables.
        The command line arguments are returned as attributes of a Namespace object.
        The program terminates immediately if the command line is not parsed successfully.
        
        Example:
            args = parseCmdLine()
            ...
            print args.configFile, args.masterServer
    """
    configFile = os.path.join(os.path.dirname(sys.argv[0]),
                              os.path.basename(sys.argv[0]) + ".conf")
    desc = '''
    Run the Brata Station application.  The app behavior is configured by
    a configuration parameter file and command line arguments.  The default
    config file path is: {}
    '''.format(configFile)
    
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument('-m', '--masterServer', default=MS_DEFAULT_ADDR,
                        help='Master Server address (hostname or IP address) optionally followed by ":" and port number (default: {})'.format(MS_DEFAULT_ADDR))
    parser.add_argument('-t', '--stationType', choices=STATION_TYPES,
                        help='one of "cts", "cpa", "hmb", "dock", "secure", "rte".  If not specified, the stationName will be used to determine stationType.')
    parser.add_argument('-n', '--stationName',
                        help='usually a stationType followed by 2 digits.')
    parser.add_argument('-i', '--netInterface', default=NET_INTERFACE_DEFAULT,
                        help='the net connection device name (usually wlan0 or eth0).')
    parser.add_argument('-c', '--configFile', default=configFile,
                        help='specify an alternate config file (default: {})'.format(configFile))
    parser.add_argument('--console', action="store_true",
                        help='emulate the station hardware interface using terminal I/O')
    
    args = parser.parse_args()
    # Program exits here if command line parse fails, after outputting a usage message.
    
    if args.stationName is not None:
        if args.stationType is None:
            # stationName is set and stationType is not set, so try to set the type from the name
            if len(args.stationName) >= 3:
                sType = args.stationName[0:3].lower()
                if sType in STATION_TYPES:
                    args.stationType = sType
    
    # If stationType is still not set, set it to one of the types
    if args.stationType is None:
        args.stationType = STATION_TYPES[0]  # set a default value
        
    # If stationName is not set, set it from the type
    if args.stationName is None:
        args.stationName = args.stationType + "01"

    return args

    

# ------------------------------------------------------------------------------
def clean_termination(signal, frame):
    """Exits the application after cleaning up.

    A zero exit code is passed back to the calling environment if no problems
    occurred during termination; otherwise, a nonzero exit code is passed back.

    Args:
        signal (int): The number of the signal being handled.
        frame (frame): The current stack frame. (Not used.)
    Returns:
        No return.
    Raises:
        N/A.

    """
    global app

    try:
        app.stop(signal)
    except Exception, e:
        logger.critical("Exception occurred while stopping: " + e.args[0])
        sys.exit(1)

    sys.exit(0)


# ------------------------------------------------------------------------------
if __name__ == "__main__":

    logger = logging.getLogger(__name__)
    logger.setLevel(logging.DEBUG) # TODO - delete
    handler = logging.handlers.SysLogHandler(address = '/dev/log')
    logger.addHandler(handler)

    try:
        # register the signal handler for the signals specified in the question
        signal.signal(signal.SIGINT,  clean_termination)
        signal.signal(signal.SIGTERM, clean_termination)
        signal.signal(signal.SIGABRT, clean_termination)

        #TODO Delete Disabled due to seg fault on Raspbian
        #TODO Delete monkey.patch_all()
        main()
    except Exception, e:
        exType, ex, tb = sys.exc_info()
        logger.critical("Exception occurred of type " + exType.__name__)
        logger.critical(str(e))
        traceback.print_tb(tb)
        sys.exit(1)

sys.exit(0)
