# ------------------------------------------------------------------------------
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#
#  See the License for the specific language governing permissions and
#  limitations under the License.
# ------------------------------------------------------------------------------
"""
The one-and-only station configuration file. All station configuration belongs
in this config file, whether it's for the DOCK, SECURE, or RETURN.

This file uses the command line arguments found in "args", which is set in
the global environment before this config file is interpreted.  You should
no longer need to modify this file to configure for your station type or
Master Server address.  Those can be set from the command line.

"""

from station.util import Config

# ------------------------------------------------------------------------------
#class Config(object):
#   pass

# ------------------------------------------------------------------------------
s = Config()

#---
# Enable one of the following for the connection. TODO Blah blah blah.
#---
s.ConnectionModuleName = 'station.connection'


#---
# Enable one of the following for the hardware. The console module simulates the
# hardware using console functions. This means the LEDs and vibration motor
# status will be printed to the logs instead of really lighting up or vibrating.
#---
if args.console:
    s.HardwareModuleName = 'station.console'
elif args.stationType.lower().startswith("dock"):
    s.HardwareModuleName = ''
else:
    s.HardwareModuleName = 'station.hw'


#---
# Enable one of the following modules to select the station type. The module is
# expected to define a class named the value of StationClassName. This is the
# starting point for a station.
#---
#s.StationType = 'station.types.dock'
#s.StationType = 'station.types.secure'
#s.StationType = 'station.types.return'
s.StationType = 'station.types.' + args.stationType

s.ConnectionManagerClassName = 'ConnectionManager'
s.ConnectionManager = Config()

# TODO Make sure the station exists in the MS database as a "tag"
#s.ConnectionManager.StationId = 'dock01'
#s.ConnectionManager.StationId = 'dock02'
#s.ConnectionManager.StationId = 'dock03'
s.ConnectionManager.StationId = 'secure01'
#s.ConnectionManager.StationId = 'secure02'
#s.ConnectionManager.StationId = 'secure03'
#s.ConnectionManager.StationId = 'return01'
#s.ConnectionManager.StationId = 'return02'
#s.ConnectionManager.StationId = 'return03'
s.ConnectionManager.StationId = args.stationName
s.ConnectionManager.NetInterface = args.netInterface


#---
# Messages from Station to MS
#---
# TODO change back to localhost:8080
#ms_ip = "http://172.27.164.9:80"
ms_ip = "http://" + args.masterServer
#s.ConnectionManager.JoinUrl = 'http://localhost:8080/piservice/join'
#s.ConnectionManager.LeaveUrl = 'http://localhost:8080/piservice/leave'
#s.ConnectionManager.TimeExpiredUrl = 'http://localhost:8080/piservice/time_expired'
#s.ConnectionManager.SubmitUrl = 'http://localhost:8080/piservice/submit'
s.ConnectionManager.JoinUrl = ms_ip + '/piservice/join/'
s.ConnectionManager.LeaveUrl = ms_ip + '/piservice/leave/'
s.ConnectionManager.TimeExpiredUrl = ms_ip + '/piservice/time_expired/'
s.ConnectionManager.SubmitUrl = ms_ip + '/piservice/submit/'

#---
# Messages from MS to Station
#---
s.ConnectionManager.ResetUrlRule = '/rpi/reset/<int:pin>'
# TODO - To test:
# $ curl -X GET 'http://localhost:5000/rpi/reset/31415'
s.ConnectionManager.StartChallengeUrlRule = '/rpi/start_challenge'
# TODO - To test:
# $ curl -X POST --header 'Content-Type: application/json' --data '{"message_version": 0, "message_timestamp": "2014-09-15 14:08:59", "secure_tone_Pattern": [3, 5, 6, 2, 2, 3, 2, 0, 5], "secure_state": "True"}' 'http://localhost:5000/rpi/start_challenge'
s.ConnectionManager.PostChallengeUrlRule = '/rpi/post_challenge'
# $ curl -X POST --header 'Content-Type: application/json' --data '{"message_version": 0, "message_timestamp": "2014-09-15 14:08:59", "secure_pulse_Pattern": [3, 5, 2, 2], "secure_max_pulse_width": [250], "secure_max_gap": [250], "secure_min_gap": [250]}' 'http://localhost:5000/rpi/post_challenge'
# $ curl -X POST --header 'Content-Type: application/json' --data '{"message_version": 0, "message_timestamp": "2014-09-15 14:08:59", "theatric_delay_ms": "2000", "return_guidance_pattern": [9, 18, 27, 36, 45, 54]}' 'http://localhost:5000/rpi/start_challenge'

s.ConnectionManager.ShutdownUrlRule = '/rpi/shutdown/<int:pin>'
# TODO - To test:
# $ curl -X GET 'http://localhost:5000/rpi/shutdown/31415'
s.ConnectionManager.ResetPIN = 31415
s.ConnectionManager.ShutdownPIN = 31415
s.ConnectionManager.ReallyShutdown = False

# TODO MS information
# //http://dc2014.hostreo.com/m/mgmt_main/login
# http://dc2014.comli.com/m/mgmt_main/login
# admin password is on the login page
# DeviceTesting/Test Contact


s.StationClassName = 'Station'
s.StationTypeConfig = Config()
s.StationTypeConfig.DisplayClassName = 'Display'
s.StationTypeConfig.LedClassName = 'Led'
s.StationTypeConfig.PushButtonMonitorClassName = 'PushButtonMonitor'
#s.StationTypeConfig.VibrationMotorClassName = 'VibrationMotor'
#s.StationTypeConfig.PowerOutputClassName = 'VibrationMotor'
#s.StationTypeConfig.UrgencyLedClassName = 'UrgencyLed'

# if running with hardware but want to avoid sounds set to 'Buzzer'
# otherwise set this to 'SilentBuzzer'
#s.StationTypeConfig.BuzzerClassName = 'SilentBuzzer'
#s.StationTypeConfig.BuzzerClassName = 'Buzzer'
s.StationTypeConfig.InputClassName = 'Input'

# For RETURN
# TODO: It may be worth mapping the display messages to the config file
s.StationTypeConfig.Display = Config()
s.StationTypeConfig.Display.lineWidth = 16  # TODO rename to lineWidth_chars
s.StationTypeConfig.PushButtons = []

pushButton = Config()
pushButton.Name = 'Up'
pushButton.ConsoleKeyPress = 'i'
pushButton.HwKeyPress = 'UP'
s.StationTypeConfig.PushButtons.append(pushButton)

pushButton = Config()
pushButton.Name = 'Down'
pushButton.ConsoleKeyPress = 'm'
pushButton.HwKeyPress = 'DOWN'
s.StationTypeConfig.PushButtons.append(pushButton)

pushButton = Config()
pushButton.Name = 'Left'
pushButton.ConsoleKeyPress = 'j'
pushButton.HwKeyPress = 'LEFT'
s.StationTypeConfig.PushButtons.append(pushButton)

pushButton = Config()
pushButton.Name = 'Right'
pushButton.ConsoleKeyPress = 'k'
pushButton.HwKeyPress = 'RIGHT'
s.StationTypeConfig.PushButtons.append(pushButton)

pushButton = Config()
pushButton.Name = 'Enter'
pushButton.ConsoleKeyPress = '\n'
pushButton.HwKeyPress = 'SELECT'
s.StationTypeConfig.PushButtons.append(pushButton)


providePower = Config()
providePower.Name = 'ProvidePower'
providePower.OutputPin = 'h'
s.StationTypeConfig.PowerOutputs = providePower

s.StationTypeConfig.Inputs = []
lightDetector = Config()
lightDetector.Name = 'lightDetector'
lightDetector.InputPin = 'd'
s.StationTypeConfig.Inputs.append(lightDetector)

# For SECURE
s.StationTypeConfig.Leds = []

led = Config()
led.Name = 'red'
led.OutputPin = 'red'
s.StationTypeConfig.Leds.append(led)

led = Config()
led.Name = 'yellow'
led.OutputPin = 'amber'
s.StationTypeConfig.Leds.append(led)

led = Config()
led.Name = 'green'
led.OutputPin = 'green'
s.StationTypeConfig.Leds.append(led)

