# ------------------------------------------------------------------------------
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#
#  See the License for the specific language governing permissions and
#  limitations under the License.
# ------------------------------------------------------------------------------
"""
The one-and-only station configuration file. All station configuration belongs
in this config file, whether it's for the HMB, CPA, or CTS.

"""


# ------------------------------------------------------------------------------
class Config(object):
   pass


# ------------------------------------------------------------------------------
s = Config()


#---
# Enable one of the following for the connection. TODO Blah blah blah.
#---
#s.ConnectionModuleName = 'station.console' # TODO Unimplemented
s.ConnectionModuleName = 'station.connection'


#---
# Enable one of the following for the hardware. The console module simulates the
# hardware using console functions. This means the LEDs and vibration motor
# status will be printed to the logs instead of really lighting up or vibrating.
#---
s.HardwareModuleName = 'station.console'
#s.HardwareModuleName = 'station.hw'


#---
# Enable one of the following modules to select the station type. The module is
# expected to define a class named the value of StationClassName. This is the
# starting point for a station.
#---
# TODO Change back to enable hmb
#s.StationType = 'station.types.hmb'
s.StationType = 'station.types.cpa'
#s.StationType = 'station.types.cts'


s.ConnectionManagerClassName = 'ConnectionManager'
s.ConnectionManager = Config()
s.ConnectionManager.StationId = '01'

s.ConnectionManager.ConnectUrl = 'http://localhost:8080/m/rpi/join'
s.ConnectionManager.DisconnectUrl = 'http://localhost:8080/m/rpi/leave'
s.ConnectionManager.TimeExpiredUrl = 'http://localhost:8080/m/rpi/time_expired'
s.ConnectionManager.SubmitUrl = 'http://localhost:8080/m/rpi/submit'
s.ConnectionManager.ResetUrlRule = '/rpi/reset/<int:pin>'
# TODO - To test:
# $ curl -X POST 'http://localhost:5000/rpi/reset/31415'
s.ConnectionManager.StartChallengeUrlRule = '/rpi/start_challenge/<string:teamId>'
# TODO - To test:
# $ curl -X POST --header 'Content-Type: application/json' --data '{"message_version": 0, "message_timestamp": "2014-09-15 14:08:59", "theatric_delay_ms": "2000", "hmb_vibration_pattern_ms": [1000, 2000, 1000, 4000, 1000, 10000]}' 'http://localhost:5000/rpi/start_challenge/13579'
# $ curl -X POST --header 'Content-Type: application/json' --data '{"message_version": 0, "message_timestamp": "2014-09-15 14:08:59", "theatric_delay_ms": "2000", "cpa_velocity": "246", "cpa_velocity_tolerance_ms": "1000", "cpa_window_time_ms": "4000", "cpa_window_time_tolerance_ms": "5000", "cpa_pulse_width_ms": "4500", "cpa_pulse_width_tolerance_ms": "3500"}' 'http://localhost:5000/rpi/start_challenge/13579'
# $ curl -X POST --header 'Content-Type: application/json' --data '{"message_version": 0, "message_timestamp": "2014-09-15 14:08:59", "theatric_delay_ms": "2000", "cts_combo": [97, 42, 6]}' 'http://localhost:5000/rpi/start_challenge/13579'
s.ConnectionManager.SubmitUrlRule = '/rpi/submit/<string:stationId>/<string:teamId>'
# TODO - To test:
# $ curl -X POST --header 'Content-Type: application/json' --data '{"message_version": 0, "message_timestamp": "2014-09-15 14:08:59", "theatric_delay_ms": 3000, "submitted_answer": "42", "is_correct": "True", "challenge_incomplete": "True"}' 'http://localhost:5000/rpi/submit/2468/13579'
s.ConnectionManager.ShutdownUrlRule = '/rpi/shutdown/<int:pin>'
# TODO - To test:
# $ curl -X POST 'http://localhost:5000/rpi/shutdown/31415'
s.ConnectionManager.ResetPIN = 31415
s.ConnectionManager.ShutdownPIN = 31415
s.ConnectionManager.ReallyShutdown = False

# TODO MS information
# //http://dc2014.hostreo.com/m/mgmt_main/login
# http://dc2014.comli.com/m/mgmt_main/login
# admin password is on the login page
# DeviceTesting/Test Contact


s.StationClassName = 'Station'
s.StationTypeConfig = Config()
s.StationTypeConfig.DisplayClassName = 'Display'
s.StationTypeConfig.LedClassName = 'Led'
s.StationTypeConfig.PushButtonMonitorClassName = 'PushButtonMonitor'
s.StationTypeConfig.VibrationMotorClassName = 'VibrationMotor'
s.StationTypeConfig.PowerOutputClassName = 'VibrationMotor'
s.StationTypeConfig.BuzzerClassName = 'Buzzer'

# period = 1.0 sec
# want motor 1 to be on 1/5 of the time, off remainder
# want motor 2 to be on 1/7 of the time, off remainder
# want motor 3 to be on 1/11 of the time, off remainder
# (note the inverse of prime numbers)

# For CTS
s.StationTypeConfig.Display = Config()

# For CTS
s.StationTypeConfig.PushButtons = []

pushButton = Config()
pushButton.Name = 'Up'
pushButton.ConsoleKeyPress = 'i'
pushButton.HwKeyPress = 'UP'
s.StationTypeConfig.PushButtons.append(pushButton)

pushButton = Config()
pushButton.Name = 'Down'
pushButton.ConsoleKeyPress = 'm'
pushButton.HwKeyPress = 'DOWN'
s.StationTypeConfig.PushButtons.append(pushButton)

pushButton = Config()
pushButton.Name = 'Left'
pushButton.ConsoleKeyPress = 'j'
pushButton.HwKeyPress = 'LEFT'
s.StationTypeConfig.PushButtons.append(pushButton)

pushButton = Config()
pushButton.Name = 'Right'
pushButton.ConsoleKeyPress = 'k'
pushButton.HwKeyPress = 'RIGHT'
s.StationTypeConfig.PushButtons.append(pushButton)

pushButton = Config()
pushButton.Name = 'Enter'
pushButton.ConsoleKeyPress = '\n'
pushButton.HwKeyPress = 'SELECT'
s.StationTypeConfig.PushButtons.append(pushButton)

# For HMB
s.StationTypeConfig.VibrationMotors = []

huey = Config()
huey.Name = 'Huey'
huey.OutputPin = 'e'
s.StationTypeConfig.VibrationMotors.append(huey)

dewey = Config()
dewey.Name = 'Dewey'
dewey.OutputPin = 'f'
s.StationTypeConfig.VibrationMotors.append(dewey)

louie = Config()
louie.Name = 'Louie'
louie.OutputPin = 'g'
s.StationTypeConfig.VibrationMotors.append(louie)

# For CPA
s.StationTypeConfig.PowerOutputs = []
providePower = Config()
providePower.Name = 'ProvidePower'
providePower.OutputPin = 'h'
s.StationTypeConfig.PowerOutputs.append(providePower)

s.StationTypeConfig.Buzzers = []
successBuzzer = Config()
successBuzzer.Name = 'SuccessBuzzer'
# Can specify a midi file, but must include the track name
# as the pibrella can only play one track at a time
successBuzzer.Song = []
sNote1 = Config()
sNote1.File = '/opt/designchallenge2015/brata.station/bon/taps.mid'
sNote1.Track = 'Taps'
successBuzzer.Song.append(sNote1)
sNote2 = Config()
sNote2.Tone = -2
sNote2.Duration = 0.49
successBuzzer.Song.append(sNote2)
sNote3 = Config()
sNote3.Tone = -2
sNote3.Duration = 0.49
successBuzzer.Song.append(sNote3)
sNote4 = Config()
sNote4.Tone = -2
sNote4.Duration = 0.49
successBuzzer.Song.append(sNote4)
sNote5 = Config()
sNote5.Tone = -2
sNote5.Duration = 0.49
successBuzzer.Song.append(sNote5)
s.StationTypeConfig.Buzzers.append(successBuzzer)

redBuzzer = Config()
redBuzzer.Name = 'red'
redNote = Config()
redNote.Tone = 0
redNote.Duration = 1.0
redBuzzer.Song.append(redNote)
s.StationTypeConfig.Buzzers.append(redBuzzer)

redBuzzer = Config()
redBuzzer.Name = 'yellow'
redNote = Config()
redNote.Tone = 1
redNote.Duration = 1.0
redBuzzer.Song.append(redNote)
s.StationTypeConfig.Buzzers.append(redBuzzer)

redBuzzer = Config()
redBuzzer.Name = 'green'
redNote = Config()
redNote.Tone = 2
redNote.Duration = 1.0
redBuzzer.Song.append(redNote)
s.StationTypeConfig.Buzzers.append(redBuzzer)

failBuzzer = Config()
failBuzzer.Name = 'FailBuzzer'
# Make own song TODO figure out if melody is supported and use that
# format
failBuzzer.Song = []
failNote1 = Config()
failNote1.Tone = 0
failNote1.Duration = 0.49
failBuzzer.Song.append(failNote1)
failNote2 = Config()
failNote2.Tone = -2
failNote2.Duration = 0.49
failBuzzer.Song.append(failNote2)
failNote3 = Config()
failNote3.Tone = -2
failNote3.Duration = 0.49
failBuzzer.Song.append(failNote3)
failNote4 = Config()
failNote4.Tone = -2
failNote4.Duration = 0.49
failBuzzer.Song.append(failNote4)
failNote5 = Config()
failNote5.Tone = -2
failNote5.Duration = 0.49
failBuzzer.Song.append(sNote5)
s.StationTypeConfig.Buzzers.append(failBuzzer)

# For HMB and CPA
s.StationTypeConfig.Leds = []

led = Config()
led.Name = 'red'
led.OutputPin = 'red'
s.StationTypeConfig.Leds.append(led)

led = Config()
led.Name = 'yellow'
led.OutputPin = 'amber'
s.StationTypeConfig.Leds.append(led)

led = Config()
led.Name = 'green'
led.OutputPin = 'green'
s.StationTypeConfig.Leds.append(led)

